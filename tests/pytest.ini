[pytest]
# Pytest configuration for Plan Beyond test suite

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum Python version
minversion = 3.8

# Paths
testpaths = tests

# Output options
addopts =
    -v
    --strict-markers
    --tb=short
    --cov=app
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    --cov-branch
    --maxfail=5
    -p no:warnings
    --durations=10

# Markers for categorizing tests
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, may hit external services)
    e2e: End-to-end tests (slowest, full user journeys)
    security: Security-focused tests
    performance: Performance and load tests
    concurrency: Concurrency and race condition tests
    regression: Regression tests for bug fixes
    slow: Tests that take significant time to run
    requires_aws: Tests that require AWS services (KMS, S3)
    requires_google: Tests that require Google services (Gemini, Vision)
    requires_smtp: Tests that require SMTP server
    requires_twilio: Tests that require Twilio
    critical: Critical priority tests (üî•)
    important: Important priority tests (‚≠ê)
    foundation: Foundation layer tests
    auth: Authentication & authorization tests
    vault: Vault & encryption tests
    categories: Category system tests
    folders: Folder system tests
    memories: Memory collection tests
    death: Death declaration tests
    reminders: Reminder system tests
    policy_checker: Policy checker tests
    file_storage: File storage tests
    admin: Admin operation tests
    external_services: External service integration tests

# Coverage options
[coverage:run]
source = app
omit =
    */tests/*
    */migrations/*
    */venv/*
    */__pycache__/*
    */site-packages/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test timeout (prevent hanging tests)
timeout = 300

# Asyncio configuration
asyncio_mode = auto

# Cache
cache_dir = .pytest_cache
